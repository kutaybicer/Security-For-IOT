
#The code is written in python language and visual studio code is used as compiler.#Anaconda 3.9.7 is used as the version.
#No value is requested from the user in the code. Plaintext and key values are predefined.
#Both algorithms use numpy and time libraries. If these libraries are not downloaded, the code may fail.
#As long as the libraries are downloaded, it is suitable to run with any compiler.


import numpy as np
import time

# Assigning a timer to achieve code speed.
start = time.time()

plaintext = (
    [0x30,0xa3,0xe5,0x1a],
    [0xc8,0x5c,0xfb,0x0a],
    [0x1c,0xe4,0xc1,0x52],
    [0x46,0x11,0x19,0xef],
    )

key = (
    [0x2b,0x28,0xab,0x09],
    [0x7e,0xae,0xf7,0xcf],
    [0x15,0xd2,0x15,0x4f],
    [0x16,0xa6,0x88,0x3c],
    )

rcon = [0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,0x1B,0x36]

s_box = (
  [0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76],
  [0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0],
  [0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15],
  [0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75],
  [0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84],
  [0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF],
  [0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8],
  [0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2],
  [0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73],
  [0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB],
  [0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79],
  [0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08],
  [0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A],
  [0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E],
  [0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF],
  [0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16],
)
#The numpy function used to see the result values in hexadecimal
to_hex = np.vectorize(hex)

#Function that converts decimal values to binary values and deletes the initial 0b expression
def dectobin(n):
    return bin(n).replace("0b", "")

#XOR operation between plaintext and key
def round_key(text ,keyy):
  round_matrix = np.zeros((4,4))
  round_matrix =np.bitwise_xor(text,keyy)
  return round_matrix

#Substitude bytes operation
def sub(text):
  for i in range (4):
    for j in range (4):
      x = text[i][j] #Taking the 2 hexadecimal values
      #Splitting the 2 hexadecimal values into 2 parts (xxxx/xxxx)
      y = x >> 4    
      z = x & 15    
      #Conversions of these values
      biny = (dectobin(y))
      binz = (dectobin(z))
      biny = int(biny,2)
      binz = int(binz,2)
      #Values goes to s_box
      text[i][j]=s_box[biny][binz]
  text_last = [list( map(int,i) ) for i in text]
  return text_last

#Shifting the plaintext
def shifting(text):
  text[1][0],text[1][1],text[1][2],text[1][3] = text[1][1],text[1][2],text[1][3],text[1][0]
  text[2][0],text[2][1],text[2][2],text[2][3] = text[2][2],text[2][3],text[2][0],text[2][1]
  text[3][0],text[3][1],text[3][2],text[3][3] = text[3][3],text[3][0],text[3][1],text[3][2]
  return text

#Bitwise multiplication operation for mix_columns 
def multiply_by_2(text):
    newtext = text << 1 # Multiplication with 2
    newtext &= 0xff   #Masking
    if (text & 128) != 0:  #Check if it has 9. bit
        newtext = newtext ^ 0x1b   #If it has 9. bit, XOR with 0x1b
    return newtext
#Multiplication with 3 
def multiply_by_3(text):
    return multiply_by_2(text) ^ text # Multiplication with 3 = Multiplication with 2 then XOR with original text

#Main function for mixing columns
def mix_columns(text):
    newtext = [[], [], [], []]
    for i in range(4):
        col = [text[j][i] for j in range(4)] #Columnarization process
        col = mix_column(col) #Calling the matris multiplication process
        for i in range(4):
            newtext[i].append(col[i])
    return newtext

#Performing multiplication operations in accordance with the algorithm
def mix_column(column):
    mixed_text = [
        multiply_by_2(column[0]) ^ multiply_by_3(column[1]) ^ column[2] ^ column[3],
        multiply_by_2(column[1]) ^ multiply_by_3(column[2]) ^ column[3] ^ column[0],
        multiply_by_2(column[2]) ^ multiply_by_3(column[3]) ^ column[0] ^ column[1],
        multiply_by_2(column[3]) ^ multiply_by_3(column[0]) ^ column[1] ^ column[2],
    ]
    return mixed_text

def key_expansion(key,cnt):
  w0 = [0,0,0,0]
  w1 = [0,0,0,0]
  w2 = [0,0,0,0]
  w3 = [0,0,0,0]

  #Assigning key values to w0,w1,w2 and w3 arrays
  w0[0],w0[1],w0[2],w0[3] = key[0][0],key[1][0],key[2][0],key[3][0]
  w1[0],w1[1],w1[2],w1[3] = key[0][1],key[1][1],key[2][1],key[3][1]
  w2[0],w2[1],w2[2],w2[3] = key[0][2],key[1][2],key[2][2],key[3][2]
  w3[0],w3[1],w3[2],w3[3] = key[0][3],key[1][3],key[2][3],key[3][3]

  aux_result = [0,0,0,0]
  aux_result = aux_func(to_hex(w3),cnt) # Calling the aux_function for w3

  wnew0 = [0,0,0,0]
  wnew1 = [0,0,0,0]
  wnew2 = [0,0,0,0]
  wnew3 = [0,0,0,0]
  #XOR operations according to the algorithm
  wnew0[0],wnew0[1],wnew0[2],wnew0[3] = w0[0]^int(aux_result[0]), w0[1]^int(aux_result[1]),w0[2]^int(aux_result[2]),w0[3]^int(aux_result[3])
  wnew1[0],wnew1[1],wnew1[2],wnew1[3] = wnew0[0]^w1[0],wnew0[1]^w1[1],wnew0[2]^w1[2],wnew0[3]^w1[3]
  wnew2[0],wnew2[1],wnew2[2],wnew2[3] = wnew1[0]^w2[0],wnew1[1]^w2[1],wnew1[2]^w2[2],wnew1[3]^w2[3]
  wnew3[0],wnew3[1],wnew3[2],wnew3[3] = wnew2[0]^w3[0],wnew2[1]^w3[1],wnew2[2]^w3[2],wnew2[3]^w3[3]

  newkey = np.zeros([4,4])
  # Reassigning the values of the matrix to the 4x4 matrix
  newkey[0][0],newkey[1][0],newkey[2][0],newkey[3][0] = wnew0[0],wnew0[1],wnew0[2],wnew0[3]
  newkey[0][1],newkey[1][1],newkey[2][1],newkey[3][1] = wnew1[0],wnew1[1],wnew1[2],wnew1[3]
  newkey[0][2],newkey[1][2],newkey[2][2],newkey[3][2] = wnew2[0],wnew2[1],wnew2[2],wnew2[3]
  newkey[0][3],newkey[1][3],newkey[2][3],newkey[3][3] = wnew3[0],wnew3[1],wnew3[2],wnew3[3]
  updated_key = [list( map(int,i) ) for i in newkey]
  return updated_key

#aux function for w3
def aux_func(column0,cnt):
  #Shifting operation 
  column0[0],column0[1],column0[2],column0[3] = column0[1],column0[2],column0[3],column0[0]
  #S_box operation for shifted w3 (as same as with the "sub" function except this array contains 4 variables)
  for i in range (4):
    x = int(column0[i],16)
    y = x >> 4
    z = x & 15
    biny = (dectobin(y))
    binz = (dectobin(z))
    biny = int(biny,2)
    binz = int(binz,2)
    column0[i]=s_box[biny][binz]

  #XOR operation between rcon and first index, other indexes are XORed with 0
  column0[0] = int(column0[0])^rcon[cnt]
  column0[1] = int(column0[1])^0
  column0[2] = int(column0[2])^0
  column0[3] = int(column0[3])^0

  return column0


if __name__== '__main__':

  #First round (print functions are called to check the algorithm step by step)
  print("Round:")
  a1 = round_key(plaintext,key)
  print(to_hex(a1))

  print("Sub:")
  a2 = sub(a1)
  print(to_hex(a2))

  print("Shift:")
  a3 = shifting(a2)
  print(to_hex(a3))

  print("Mix:")
  a4 = mix_columns(a3)
  print(to_hex(a4))

  print("New key:")
  newkey = key_expansion(key,0) # First key is called
  print(to_hex(newkey))

  print("Round:")
  a1 = round_key(a4,newkey)
  print(to_hex(a1))

  #8 round in a for loop without last round 
  for z in range(8):
    print("Sub:")
    a2 = sub(a1)
    print(to_hex(a2))

    print("Shift:")
    a3 = shifting(a2)
    print(to_hex(a3))

    print("Mix:")
    a4 = mix_columns(a3)
    print(to_hex(a4))

    print("New key:")
    newkey = key_expansion(newkey,(z+1))
    print(to_hex(newkey))

    print("Round:")
    a1 = round_key(a4,newkey)
    print(to_hex(a1))

  #Last round
  print("Sub:")
  a2 = sub(a1)
  print(to_hex(a2))

  print("Shift:")
  a3 = shifting(a2)
  print(to_hex(a3))

  print("New key:")
  newkey = key_expansion(newkey,(9)) #Last key is called
  print(to_hex(newkey))

  print("Cipher text :")
  a1 = round_key(a3,newkey)
  print(to_hex(a1))

  #Execution speed calculated
  end = time.time()
  #Printing execution speed
  print(f"Runtime of the program is {end - start}")
